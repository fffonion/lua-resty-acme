name: Tests

on:
  push:
  pull_request:
  schedule:
  - cron:  '0 7 * * *'

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        nginx: ["1.17.8", "1.19.3"]
        openssl: ["1.1.1j"]
        include:
        - nginx: "1.15.8"
          openssl: "1.0.2u"

    env:
      JOBS: 3
      SH: bash
      NGX_BUILD_JOBS: 3
      BASE_PATH: /home/runner/work/cache
      LUAJIT_PREFIX: /home/runner/work/cache/luajit21
      LUAJIT_LIB: /home/runner/work/cache/luajit21/lib
      LUAJIT_INC: /home/runner/work/cache/luajit21/include/luajit-2.1
      LUA_INCLUDE_DIR: /home/runner/work/cache/luajit21/include/luajit-2.1
      OPENSSL_PREFIX: /home/runner/work/cache/ssl
      OPENSSL_LIB: /home/runner/work/cache/ssl/lib
      OPENSSL_INC: /home/runner/work/cache/ssl/include
      TEST_NGINX_SLEEP: 0.005
      TEST_NGINX_RANDOMIZE: 1
      LUACHECK_VER: 0.21.1
      CC: gcc
      NGX_BUILD_CC: gcc
  
      NGINX_CC_OPTS: ""
      LUAJIT_CC_OPTS: ""
      NGINX_VERSION: ${{ matrix.nginx }}
      OPENSSL_VER: ${{ matrix.openssl }}

    services:
      redis:
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    
    - name: Setup cache
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/work/cache
        key: ${{ runner.os }}-${{ hashFiles('**/tests.yml') }}-nginx-${{ matrix.nginx }}-openssl-${{ matrix.openssl }}

    - name: Yolo start docker containers
      run: |
        docker run -d -e CONSUL_CLIENT_INTERFACE='eth0' -e CONSUL_BIND_INTERFACE='eth0' -p 127.0.0.1:8500:8500 consul agent -server -bootstrap-expect=1
        openssl req -x509 -newkey rsa:4096 -keyout /tmp/key.pem -out /tmp/cert.pem -days 1 -nodes -subj '/CN=some.vault'
        chmod 777 /tmp/key.pem /tmp/cert.pem
        docker run -d --user root --cap-add=IPC_LOCK -e VAULT_DEV_ROOT_TOKEN_ID=root --name=vault -e 'VAULT_LOCAL_CONFIG={"listener":{"tcp":{"tls_key_file":"/tmp/key.pem","tls_cert_file":"/tmp/cert.pem","address":"0.0.0.0:8210"}}}' -v /tmp/key.pem:/tmp/key.pem -v /tmp/cert.pem:/tmp/cert.pem -p 127.0.0.1:8200:8200 -p 127.0.0.1:8210:8210 vault server -dev
        docker logs vault
        docker run -d -v /usr/share/ca-certificates/:/etc/ssl/certs -p 4001:4001 -p 2380:2380 -p 2379:2379  --name etcd quay.io/coreos/etcd:v2.3.8  -name etcd0  -advertise-client-urls http://${HostIP}:2379,http://${HostIP}:4001  -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001  -initial-advertise-peer-urls http://${HostIP}:2380  -listen-peer-urls http://0.0.0.0:2380  -initial-cluster-token etcd-cluster-1  -initial-cluster etcd0=http://${HostIP}:2380  -initial-cluster-state new
        docker logs etcd
        
    - name: Prepare vault for JWT auth
      run: |
        curl 'https://localhost:8210/v1/sys/auth/kubernetes.test' -k -X POST -H 'X-Vault-Token: root' -H 'Content-Type: application/json; charset=utf-8' --data-raw '{"path":"kubernetes.test","type":"jwt","config":{}}'
        curl 'https://localhost:8210/v1/auth/kubernetes.test/config' -k -X PUT -H 'X-Vault-Token: root' -H 'content-type: application/json; charset=utf-8' --data-raw '{"jwt_validation_pubkeys":["-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtMCbmrsltFKqStOoxl8V\nK5ZlrIMb8d+W62yoXW1DKdg+cPNq0vGD94cxl9NjjRzlSR/NVZq6Q34c1lkbenPw\nf3CYfmbQupOKTJKhBdn9sFCCbW0gi6gQv0BaU3Pa8iGfVcZPctAtdbwmNKVd26hW\nmvnoJYhyewhY+j3ooLdnmh55cZU9w1VO0PaSf2zGSmCUeIao77jWcnkEauK2RrYv\nq5yB6w54Q71+lp2jZil9e4IJP/WqcS1CtmKgiWLoZuWNJXDWaa8LbcgQfsxudn3X\nsgHaYnAdZJOaCsDS/ablKmUOLIiI3TBM6dkUlBUMK9OgAsu+wBdX521rK3u+NNVX\n3wIDAQAB\n-----END PUBLIC KEY-----"],"default_role":"root","namespace_in_state":false,"provider_config":{}}'
        curl 'https://localhost:8210/v1/auth/kubernetes.test/role/root' -k -X POST -H 'X-Vault-Token: root' -H 'content-type: application/json; charset=utf-8' --data-raw '{"token_policies":["acme"],"role_type":"jwt","user_claim":"kubernetes.io/serviceaccount/service-account.uid","bound_subject":"system:serviceaccount:kong:gateway-kong"}'
        curl 'https://localhost:8210/v1/sys/policies/acl/acme' -k -X PUT -H 'X-Vault-Token: root' -H 'Content-Type: application/json; charset=utf-8' --data-raw '{"name":"acme","policy":"path \"secret/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\"]\n}"}'

    - name: Setup tools
      run: |
        sudo apt-get install -qq -y cpanminus axel ca-certificates
        mkdir -p $OPENSSL_PREFIX $LUAJIT_PREFIX
        # perl cache
        pushd /home/runner/work/cache
        if [ ! -e perl ]; then sudo cpanm --notest Test::Nginx > build.log 2>&1 || (cat build.log && exit 1); cp -r /usr/local/share/perl/ .; else sudo cp -r perl /usr/local/share; fi
        # build tools at parent directory of cache
        cd ..
        git clone https://github.com/openresty/openresty.git ./openresty
        git clone https://github.com/openresty/nginx-devel-utils.git
        git clone https://github.com/simpl/ngx_devel_kit.git ./ndk-nginx-module
        git clone https://github.com/openresty/lua-nginx-module.git ./lua-nginx-module -b v0.10.17
        git clone https://github.com/openresty/no-pool-nginx.git ./no-pool-nginx
        # lua libraries at parent directory of current repository
        popd
        mkdir ../lib
        git clone https://github.com/openresty/lua-resty-core.git ../lua-resty-core -b v0.1.19
        git clone https://github.com/openresty/lua-resty-lrucache.git ../lua-resty-lrucache
        git clone https://github.com/openresty/lua-resty-redis.git ../lua-resty-redis
        git clone -b v0.15 https://github.com/ledgetech/lua-resty-http ../lua-resty-http
        git clone https://github.com/fffonion/lua-resty-openssl ../lua-resty-openssl
        git clone -b 0.3.0 https://github.com/spacewander/luafilesystem ../luafilesystem-ffi
        git clone https://github.com/jkeys089/lua-resty-hmac ../lua-resty-hmac && pushd ../lua-resty-hmac && git checkout 79a4929 && popd
        git clone https://github.com/iresty/lua-typeof ../lua-typeof
        git clone https://github.com/api7/lua-resty-etcd ../lua-resty-etcd -b v1.4.4
        cp -r ../lua-resty-lrucache/lib/* ../lua-resty-redis/lib/* ../lua-resty-http/lib/* ../lua-resty-openssl/lib/* ../lua-typeof/lib/* ../lua-resty-etcd/lib/* ../lib/
        cp ../luafilesystem-ffi/lfs_ffi.lua ../lib/
        find ../lib

    - name: Build OpenSSL
      run: |
        if [ "X$OPENSSL_HASH" != "X" ]; then wget https://github.com/openssl/openssl/archive/$OPENSSL_HASH.tar.gz -O - | tar zxf ; pushd openssl-$OPENSSL_HASH/; fi
        if [ "X$OPENSSL_HASH" = "X" ] ; then wget https://www.openssl.org/source/openssl-$OPENSSL_VER.tar.gz -O - | tar zxf -; pushd openssl-$OPENSSL_VER/; fi
        if [ ! -e $OPENSSL_PREFIX/include ]; then ./config shared -d --prefix=$OPENSSL_PREFIX -DPURIFY > build.log 2>&1 || (cat build.log && exit 1); fi
        if [ ! -e $OPENSSL_PREFIX/include ]; then make -j$JOBS > build.log 2>&1 || (cat build.log && exit 1); fi
        if [ ! -e $OPENSSL_PREFIX/include ]; then sudo make PATH=$PATH install_sw > build.log 2>&1 || (cat build.log && exit 1); fi
        mkdir -p $OPENSSL_PREFIX/certs/ && cp -r /etc/ssl/certs/* $OPENSSL_PREFIX/certs/

    - name: Build LuaJIT
      run: |
        cd $LUAJIT_PREFIX
        if [ ! -e luajit2 ]; then git clone -b v2.1-agentzh https://github.com/openresty/luajit2.git; fi
        cd luajit2
        make -j$JOBS CCDEBUG=-g Q= PREFIX=$LUAJIT_PREFIX CC=$CC XCFLAGS="-DLUA_USE_APICHECK -DLUA_USE_ASSERT -DLUAJIT_ENABLE_LUA52COMPAT $LUAJIT_CC_OPTS" > build.log 2>&1 || (cat build.log && exit 1)
        make install PREFIX=$LUAJIT_PREFIX > build.log 2>&1 || (cat build.log && exit 1)

    - name: Build lua-cjson
      run: |
        if [ ! -e lua-cjson ]; then git clone https://github.com/openresty/lua-cjson.git ./lua-cjson; fi
        pushd ./lua-cjson && make && sudo PATH=$PATH make install && popd

    - name: Build Nginx
      run: |
        export PATH=$BASE_PATH/work/nginx/sbin:$BASE_PATH/../nginx-devel-utils:$PATH
        export LD_LIBRARY_PATH=$LUAJIT_LIB:$LD_LIBRARY_PATH
        cd $BASE_PATH
        if [ ! -e work ]; then ngx-build $NGINX_VERSION --add-module=../ndk-nginx-module --add-module=../lua-nginx-module --with-http_ssl_module --with-cc-opt="-I$OPENSSL_INC $NGINX_CC_OPTS" --with-ld-opt="-L$OPENSSL_LIB -Wl,-rpath,$OPENSSL_LIB" --with-debug > build.log 2>&1 || (cat build.log && exit 1); fi
        nginx -V
        ldd `which nginx`|grep -E 'luajit|ssl|pcre'

    - name: Run Tests
      env:
        FRP_SERVER_HOST: ${{ secrets.FRP_SERVER_HOST }}
        FRP_SERVER_PORT: ${{ secrets.FRP_SERVER_PORT }}
        FRP_TOKEN: ${{ secrets.FRP_TOKEN }}
      run: |
        export LD_LIBRARY_PATH=$LUAJIT_LIB:$LD_LIBRARY_PATH
        export PATH=$BASE_PATH/work/nginx/sbin:$PATH
        export SUBDOMAIN=acme-ci-$(date +%s%N)
        # TEST_NGINX_PORT by Test::Nginx seems not working properly?
        export NGINX_PORT=61984
        CACHE_DIR=/home/runner/work/cache bash t/prepare_travis.sh
        TEST_NGINX_TIMEOUT=60 prove -j$JOBS -r t/
       
